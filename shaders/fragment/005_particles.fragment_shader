#define v2 vec2
#define v3 vec3
#define v4 vec4
#define f32 float
#define s32 int
#define b32 bool
#define m2 mat2
#define TAU 6.283185307179586
#define DEG_TO_RAD (TAU / 360.0)
#define zero_v2 vec2(0,0)

// Based on concept by Stephane Cuillerdier - Aiekick https://www.shadertoy.com/view/MddGWN

out v4 out_color;

uniform float iTime;
uniform v2 iResolution;
uniform v4 iMouse;

v2 aspect;

v2 to_uv(in v2 p) {
    return (((2. * p) / iResolution) - 1.) * aspect;
}

f32 random (in v2 p) {
    return fract(sin(dot(p.xy, vec2(12.9898,78.233)))*43758.5453123);
}

f32 IGN_dither(in v2 p) {
    // From http://advances.realtimerendering.com/s2014/index.html#_NEXT_GENERATION_POST
    // NEXT GENERATION POST PROCESSING IN CALL OF DUTY: ADVANCED WARFARE
    return fract(52.9829189*fract(dot(p, vec2(0.06711056, 0.00583715))));
}

void main() {
    out_color.rgba = v4(0, 0, 0, 0);

    aspect = v2(1, iResolution.y / iResolution.x);

    v2 uv = to_uv(gl_FragCoord.xy);
    v2 mouse = to_uv(iMouse.xy);
    mouse.y *= -1;

    f32 scale = 3.;
    uv.xy *= scale;
    mouse.xy *= scale;

    const s32 num_balls = 100;

    v4 color = v4(.2, .2, .1, .2);

    v2 origin = mouse.xy;
    f32 all_balls = 0;
    f32 speed = .2;
    for(s32 ball_index = 0;
            ball_index < num_balls;
            ball_index++
    ) {
        f32 nth_t = f32(ball_index) / f32(num_balls);
        f32 life_t = fract(iTime * speed + 1234.56 * sin(float(ball_index) * 123456));

        f32 ang_off = 0;
        f32 angle = TAU * nth_t + ang_off;
        f32 r = 5;
        f32 dist = life_t * 3;

        v2 dir = v2(cos(angle), sin(angle));

        //f32 j = life_t * random(uv);
        f32 j = life_t * random(dir) * sin(random(dir));
        m2 jitter = m2(cos(j), sin(j), -sin(j), cos(j));
        v2 p = origin - uv - (jitter * dir * dist);

        f32 death_falloff = (1 - life_t);
        f32 metaball = (1. / length(p)) * r * death_falloff;

        all_balls += metaball;
        color += v4(.3, 0., .2, .1) * metaball * .0025;
    }

    all_balls /= f32(num_balls);

    v4 c = color * all_balls;
    out_color.rgba += c;
}

