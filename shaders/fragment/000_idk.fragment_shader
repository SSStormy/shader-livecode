#define v2 vec2
#define v3 vec3
#define v4 vec4
#define f32 float
#define s32 int
#define m2 mat2
#define TAU 6.283185307179586
#define DEG_TO_RAD (360 / TAU)
#define zero_v2 vec2(0,0)

out v4 out_color;

uniform float time;
uniform v2 resolution;

v2 uv;

v4 rgba(float r, float g, float b, float a) {
    return vec4(r,g,b,a)/255;
}

void line(v2 origin, v2 dir, float thickness, v4 color) {
    if(length(dir * dot(uv - origin, dir)) < thickness) out_color = color;
}

bool sphere(v2 origin, f32 radius) {
    return length(uv - origin) < radius;
}

bool sphere_outline(v2 origin, f32 max_radius, f32 min_radius ) {
    bool ret = false;

    f32 len = length(uv - origin);

    if(len <= max_radius && len >= min_radius) {
        ret = true;
    }

    return ret;
}

f32 sphere_outline_halo(v2 origin, f32 max_radius, f32 min_radius, f32 bloom) {
    f32 len = length(uv - origin);

    f32 ret = 0;

    f32 max_bloom = max_radius * bloom ;
    f32 min_bloom = min_radius * (1.0/bloom);

    if(len <= max_bloom && len >= min_bloom) {
        if(len <= max_bloom && len >= max_radius) {
            ret = abs(1 - ((len - max_radius) / (max_bloom - max_radius)));
        }
        else {
            ret = abs(1 - ((min_radius - len) / (max_bloom - max_radius)));
        }
        ret = smoothstep(0, 1, ret*ret);
    }

    return ret;
}


bool ellipse(v2 origin, v2 axis, f32 radius) {
    return length((uv / axis) - origin) < radius;
}

v4 inner_scene() {
    v4 color = v4(0,0,0,1);
    color.r = 0.4;
    color.g = 0.1;
    color.b = 0.2;

    f32 angle = DEG_TO_RAD * 15.0 * sin(time * .0002);
    v2 off = v2(atan(time),sin(time)) * .01;
    uv += off;
    v2 local_uv = m2(v2(cos(angle), -sin(angle)), v2(sin(angle), cos(angle))) * uv;
    uv -= off;
    //local_uv.x *= local_uv.x / smoothstep(sin(time), atan(time), cos(time));
    local_uv.x *= local_uv.x / atan(time);
    local_uv.y *= atan(local_uv.x) * 10;

    s32 x_stripe = s32((local_uv.x + time * .05) / 0.01);
    s32 y_stripe = s32((local_uv.y + time * .05) / 0.01);

    if((x_stripe % 2) == 0) {
        color.r += 1;
    }
    if((y_stripe % 2) == 0) {
        color.r *= .5;
    }
    if(x_stripe % 5 == 0 && (y_stripe % 3) == 0) {
        color.b += smoothstep(color.r*1, 1, abs(sin(time)));
    }
    return color;
}

void main() {
    uv = (2 * gl_FragCoord.xy / resolution) - 1;
    uv.y *= resolution.y / resolution.x;

    out_color = rgba(11,12,13,255);

    float ang = 15;
    v2 dir = vec2(cos(ang * DEG_TO_RAD), sin(ang * DEG_TO_RAD));
    //line(vec2(0, .01), dir, 0.01, rgba(25,26,27,255));

    out_color.r += (1 - length(zero_v2 - uv)) * .2;
    out_color.b += (length(zero_v2 - uv)) * .02;

#if 0
    {
        v4 col = inner_scene();
        f32 a = sphere_outline_halo(zero_v2, 0.6, 0, 1.2);
        col.rgb *= v3(a,a,a);
        col.a = 0;
        out_color *= col * sin(time) * atan(time);
    }


    {
        v4 col = inner_scene();
        f32 a = sphere_outline_halo(zero_v2, 0.55, 0.38, 1.5);
        col.rgb *= v3(a,a,a);
        col.a = 0;
        out_color += col;
    }
#elif 1
    {
        v4 col = inner_scene();
        f32 a = sphere_outline_halo(zero_v2, 0.55, 0, 2);
        col.rgb *= v3(a,a,a);
        col.a = 0;
        out_color += col;
    }

#endif
    out_color.b += (1 - length(zero_v2 - uv)) * .1;
}
