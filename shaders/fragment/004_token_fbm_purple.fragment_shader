#define v2 vec2
#define v3 vec3
#define v4 vec4
#define f32 float
#define s32 int
#define b32 bool
#define m2 mat2
#define TAU 6.283185307179586
#define DEG_TO_RAD (TAU / 360.0)
#define zero_v2 vec2(0,0)

out v4 out_color;

uniform float time;
uniform v2 resolution;

v2 uv;

v4 rgba(float r, float g, float b, float a) {
    return vec4(r,g,b,a)/255;
}

bool line(v2 origin, v2 dir, float thickness) {
    dir = v2(dir.y, -dir.x);
    f32 len_along_normal = dot(uv - origin, dir);

    return abs(len_along_normal) < thickness;
}

f32 circle(v2 p, v2 pos, f32 radius) {
    return length(p - pos) - radius;
}

f32 random (v2 p) {
    return fract(sin(dot(p.xy,vec2(12.9898,78.233)))*43758.5453123);
}

f32 noise (v2 p) {
    vec2 i = floor(p);
    vec2 f = fract(p);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    vec2 u = f * f * (3.0 - 2.0 * f);

    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

f32 fbm(v2 p, f32 freq, f32 amp, f32 lacunarity, f32 gain, s32 octave) {
    f32 accum = 0;
    //f32 ang = 1.6180339;
    f32 ang = 0.5;

    for(s32 i = 0; i < octave; i++) {
        f32 n = noise(p) * amp;
        accum += n;

        amp *= gain;

        p = (m2(cos(ang), sin(ang), -sin(ang), cos(ang)) * p) * freq + v2(1000, 0);
        p *= 2;

        freq *= lacunarity;
    }

    return accum;
}

f32 fbm_2(v2 p) {
    float v = 0.0;
    float a = 0.5;
    vec2 shift = vec2(100.0);

    // Rotate to reduce axial bias
    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));
    for (int i = 0; i < 5; ++i) {
        v += a * noise(p);
        a *= .5;

        p = rot * p * 1.5 + shift;
    }
    return v;
}

f32 fbm_s(v2 p) {
    //return fbm_2(p);
    return fbm(p, 1.5, .6, 1.1, .5, 5);
}


f32 sdf_torus(v3 p, v2 t) {
    v2 q = v2(length(p.xy) - t.x, p.z);
    return length(q) - t.y;
}

f32 sdf_scene(v3 p) {
    return sdf_torus(p - v3(0,0,-3), v2(2,.1));
}

v3 scene_normal(v3 p) {
    v2 e = v2(0.0002, 0);
    return normalize(v3(
        sdf_scene(p + e.xyy) - sdf_scene(p - e.xyy),
        sdf_scene(p + e.yxy) - sdf_scene(p - e.yxy),
        sdf_scene(p + e.yyx) - sdf_scene(p + e.yyx)
    ));
}

void main() {
    uv = (2 * gl_FragCoord.xy / resolution) - 1;
    uv.y *= resolution.y / resolution.x;

    out_color.rgba = v4(0,0,0,1);
    
    v3 dir = normalize(v3(uv, -1));

    const f32 max_dist = 100;
    f32 dir_dist = 0;
    v3 last_ray;

    for(s32 i = 0; i < 100; i++) {
        v3 ray = dir * dir_dist;
        last_ray = ray;

        f32 distance = sdf_scene(ray);

        if(distance <= 0.0002) {
            break;
        }

        dir_dist += distance;
    }

    if(max_dist > dir_dist) {
        v3 n = scene_normal(last_ray);
        f32 d = dot(n, dir);
        //f32 d = 1;

        f32 ang = atan(uv.y, uv.x);
        v2 p = uv * d;
        p *= .2;
        p.xy *= v2(cos(ang), -sin(ang)) * 20;

        p += v2(1000 + time * .2);
        //p.x *= .007 * sin(uv.y) + atan(uv.x) * .005;

        v2 f1 = v2(fbm_s(p), fbm_s(p));
        v2 f2 = v2(fbm_s(p + f1 * 7), fbm_s(p + f1 * 2));
        v2 f3 = v2(fbm_s(p + f2 * 4), fbm_s(p + f2));
        f32 final = fbm_s(p + f3 * 4);

        f32 r = clamp(final - 0.3, 0, 1);
        f32 g = clamp(final, 0, .2);

        out_color.rb = v2(1) * v2(r, g);

        //out_color.rgb = v3(final);
    }
}
